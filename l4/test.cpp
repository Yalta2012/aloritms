#include <chrono>
#include <cmath>
#include <cstring>
#include <fstream>
#include <iostream>
#include <random>
#include <vector>

using namespace std;
using namespace std::chrono;

char RandChar(char a, char b) { return rand() % (b - a + 1) + a; }
int RandInt(int a, int b) { return rand() % (b - a + 1) + a; }

void RandGen(char *string, size_t size) {
  for (size_t i = 0; i < size; i++) {
    string[i] = RandChar('A', 'F');
  }
}
char *LasySearch(char *string, int n, char *substring, int m) {
  int j;
  int i;
  for (i = 0; i < n - m; i++) {
    for (j = 0; j < m && *(substring + j) == *(string + i + j); j++)
      ;
    if (j == m)
      return string + i;
  }
  return nullptr;
}

int max(int a, int b) { return a > b ? a : b; }

// void Prefics(int *Next, char *substring, int m)
// {
//     int j, i;
//     for (Next[0] = j = -1, i = 1; i < m; i++)
//     {
//         for (; j > -1 && substring[j + 1] != substring[i]; j = Next[j])
//             ;
//         if (substring[j + 1] == substring[i])
//             j++;
//         Next[i] = j;
//     }
// }

bool IsPrefix(char *string, int m, int p) {
  int j = 0;
  for (int i = p; i >= -1; i--) {
    if (string[i] != string[j])
      return false;
  }
  return true;
}

char *BoyerMooreStringSearch(char *string, int n, char *substring, int m) {
  char *res = nullptr;
  int char_offset[256]; // LO
  int suffix_offset[m]; // GS
  int count = 0;

  for (int i = 0; i < 256; char_offset[i++] = -1)
    ;

  for (int i = 0; i < m; i++)
    char_offset[substring[i]] = i;

  for (int i = 0; i < m; i++) {
    suffix_offset[i] = m;
  }
  for (int i: suffix_offset){
    cout<<i<< " ";
  }
  cout<<endl;
  for (int i = 0; i < m - 1; i++) {
    suffix_offset[substring[i]] = m - 1 - i;
  }
  for (int i: suffix_offset){
    cout<<i<< " ";
  }
  cout<<endl;
  for (int i: suffix_offset){
    cout<<i<< " ";
  }
  cout<<endl;
  for (int i = 0; i <= n - m && res == nullptr;) {
    int j;
    for (j = m - 1; j >= 0; j--) {

      if (string[i + j] != substring[j]) {
        count++;
        // cout << i << endl;
        // i += max( max( (j - char_offset[string[i + j]]), suffix_offset[string[i]] ), 1);
        i+=  max(max (j-char_offset[string[i+j]] , j-suffix_offset[string[i+j]]),1);
        break;
      }
    }
    if (j == -1)
      res = string + i;
  }
  return res;
}

int main() {
  char t[] = "ACFCFADEAEEEAFADCFBEEBAEEAACDCCECFECFBAFEDDCABFCBAEDAFBEFBEDBABCAFEDECDADECEACEFADCECBCBAACCFDEDAAADABDEAAAEAEDEBDDBEDDCCFEFBAAFEECFAABEEFACDBEDEFEADFCDDFCEDABCEEFCCAAEDAEABCBDAABDDEEABECEEEEAADDCBBEEACDFCEDCCEDAABEFDBCBDEADCDDBCBECDFCDBDAEFDCEDEDAFDAACADCBADDFFEAEEEABCCEFCCAAEBEBBEDFADAEBBEEDCBBABAABFADFABBFFDECEDACBEBDAFEBEAFFEAEBEFBCBCCEDAECCECDBDEFADAFBACFAFBCEAEDAACEFEEFDAACBDBFECEFAFCEEBAABEECDEEAACDBCDDBEFACFDFDCABEBBCBDEBEAFCBBFCBDACFDCCCFBFFFEDBDECECBDDAFEFFAAAEAFBAFBEFEDECFDDDDCFEDAECEBFDFDBFBBEACCDFDCFCFDDDDBFABECEDABDDACEBADCAABEAEEABABCFACECDCADBDACDDBCABCECEFFDDADEDCCDEDABDDAECCBDCBBDEFECCDDFBEBCEEADBACCCCAEDFFFBAADFCDCDFFFDBFCDFDCEFEEBCAEBFBAFCDCCFCAECFBDCBACCCEBEABAAFFFFACBBEDABBCDACEDDCDECFFAFAADEDCDDECFADDBFACDCAEDCFBEEFCBDAEBEECBACEBACAFADACBFDCEFABEBCFBFFFDBFCEDDCDBBDEBDEEBADAEECFEFBBEEDADFCBCECBDAECDCBCACAEECEACDCEBFCFEEEEAADDABECDDEDFFABFEBFFDEAAEDCDBEBCCFADBAFEDADAAEFCFDBBFAFDDCEFEAFADDCEEBCBBFBABECEBCDEADCDDEABEDABBCFFBBEAEFADDBCDBFBBABCBADBCABEFBBEABCAFFFDDEDEDADEBFACDBBFACBFBDEBCEABEDCFBFDEAEAFBAFEABCABBFDCBCEAAECDABCECECAEFADECDDCBFEAAECADABFCCFBFBDDBBCABDFCACEBFCFFBFACFFBFBEAAEBCFDEACFDEFDDEDDBACBEEEDDEFAEDEAFDBBBDAEADCBFDEBDFACBEFFCCFBEBFDEAFABDCBBCCAFFFDEFDFEACADFFBAECDEFBADDFEEACDDCEFBFCDAFEDCBCBAEECEFAFAADEEDABDCADCCACFCDCEFDCBFEDCFCCDDFBBDCCFAFBCABAAECEBDABCDEECFEFCBEBEAECEDDABDECBAEBBDCBAADCDAFABDFEBBAFDBDEECEEADFAEBBEFFEDFBBEEECDAACDCFFAFECEFBEDCFFACDDBECEAAADAFFBBCBFAFCECDCDEBCEEFFDBBFBBEEADBBEBCBBFDDFFFCDFEFBBECADCFEADCDCEFCEEDEAFBFEEADAFCABFEEFEAFFDACFDEDBFFBEFEBDECBBFFACEEBCDEBEEBDFDEEBCEDBCECFBDEEDFAFBFFEDECFADEBACCCAADBCFEDACFBBFADCFFFEAECBCDBDEDBCAAEDEAEBFFCDADFDBFFBDBCEDCFFFABEBFBFDFEDFBADCDADCECEFDAAFFFEFEAEECCBBACEFAFAEEDECECBFAAEFFADEBBABBFACAFFAEFEABBCFBEECEABBEEDDEBEFBFBBCBFEECFFDBCEFEEBEABBECEAEDADCFCEEBCDDBCEBFBEDFEADFBABFAFAACCAEEEEFBFECEFBDECCCCEFBEEBEEFDECDBEFDDFCABEFCBBCCBFAAEEFDABDDDFACBEFFDCFEACECCACDDCECEBFECACDDAAFEFCBFFFABBADCCBDCDDAEBCEBEBFDFEBFADEFACECAACAFDCCBAEADABFFECFCCCAFEDDBADFADADBAFABBACBFFAEADECFDFEACDEECEBCBADEECDCCCABBEBEABEDAACBDAFFDEACFBFBDAEFDEEEAEAEFCCECCFDAEDDCBEFCBFFBDCEFEADCBBABBEEDBFEFCFFBDDDECAEDACCFBDBAEFBADDBEDFBDDFFECADCBFFBBFEACAAADAEBBADEFDACCDBCDCECBBCAAAFCEDACDFBDFCBEFFFFCEFAEBADCCBCBACFEDFFCACBBCDEBACCEBAADADFBFACFCFBDFBFDBECBABDADDDEDDFBFFCEDEBFCDDBCACBFFDDAEDBBEDECDFFCADDCECEFDDFCABBDECBCFCBEFFECCDCCEFFAABEBFDDDECAAEFCEFDAEACFBDFDBDAFBCDCFBACDCAEFFEBEABAABDBEBDDEBAFBEBADFAEAECFBFAFFFEFEFFAAADEFBBBFBFAAEFECFDEEBBDEFBCDECDCDABFBCCAABBEAFADBECCEDFDCBEAECCFACCBEFACABAEEBBDDBEBDDDFEBEABEEBAABDFBFDAAFCFBAAACABFBFBABACFEBEECFCBEFBCFEFECECEEEBDBCDCADBEFDBFCBFFEAFBCFFCBAEFCFADADFABEDECCBCDABBFBDFEAAFEECACCDCDAAEFBAFBABEEDEDCBBEFBDEFDEFFAFCAEFFFDEBDADCBBDBAEDADAEBBAAEAAEBEDEBFBCAFEAEFCFAEAECEADFADDBDBAFDCBCDBACFFADBDBFDDBBDEADABCBDCBEFCEABEDFDBCCFBCAEDABAEEAABBBBAFEABFCFAFBBBDEADDEBDDFBFDBEEAADFCDAFDEFCDFBEBBCEDBFEABEDACFFACEBEDAFFEACDBECBAFCBEBFDDCCDABCCDDEEBCDFCDADCBCAAFACEFEBAACAFEACFFBBBCEDEFEEABEEEEACCEBCCDCBACCFFBAEBFBFCEDADAEBECBEBCABDABDDDBACBFDEEDECEEFEAEBDFFCBEBDECAFFBAFBFDDDEAECCBBDACAFBAFFBCCEABBABBFECAAAAECDFDEDDEDFCACDACFEEFEDEBAAAAAACABBCFDFBACBEDDEFCCBBFFFEFDEDBDFACECCBFBFCDDDEBAACCABBDDEBCBAFAABCCBEABDACBDAADACDEBCCFABBFFEDADAADEAEFAAABEBDCBABBDBABAFBFBCDECEBEEDEDBECFDFCDABEBACCEBBDCEBEEDADFBFCDBFADECACBCDFEEDDDBFFABEDBFCDEDEDAEACFEFEAAECCBFAACFEEDBDACECDCADBAFEFECDDAAFAFFECDDEECBFEABBCFCBACFFEACFAAFEACDAFAECCDBFDAEEABDEBBBFBDFFCCECEBACFCEFFDEBDBFBAAFBBAECCDCEDEEAFCACEEBBFECADFCDAFEBACCCECEFAAFDCFFABEFACCFDFBAFACFEDFEFBCEBCCECBBCBFCFACEDBDCFEECABBFAAFFBABDCACDFFDFFFBBEFDBBBDBBCABCEEBEFEAEEDBEEABDACAFDBEDDDEFCFAAEBEBECDCAFAEDCADCEAEDCBAAFECCECEDAEBABCAEADCABDDDEBAEAFEDDAFFCCCAACBFEFEEAEFFBACDFDCFCACDFFCFBEAFEFFCCDBBFEAAEDEDEEAAECDDBDDBFBAEEFAEAFFFBEEFBAAFEADAAECAFDFECFCEDBCBEAFAEDDDBEAFCBDBFFFEAEACDBEECBAAFDADACEFAEEADFFCDEEDACECDCAFBEEABCBFEDECBABEAAEBDACDDAFABAECCCBEEADDECFDAEAAFEBADCDECBCBBAEBCDFFDBABDDFDCFCFBBFCDCAEDDFCBBECCBBACBFFCCBEFBDBACBCDCAADDBEFDABEFFBEDEBFFDFEBEFBFBEFFDACEFFBDFFBEAFBFEFCCEFDCEEBDBFAEFCCCABAFAFBFEBCBAEDEDEEFADABCAFCBFEBACABFFECAADAEAEACCDCEEEACBADBDCBFCADAEFAECBBADFCEAECECCFEDCDADEDDFADBDEEFFDFCABAAECDEDCCECDCFCDDFCAAFECFBFCEFECEADBEADFCFCEFEBABDAADDCAEACADEDBEACDEDCADECABBAAFEAABBAEBAECFBCDFCEBAEFBBBFCDFCABBEBCEFBCDDBFFDCCFEAEDBFDAFEDFECACDCECDEAFADEBDEABCCDDFEBECCEAFCACDCDEADDEEAFBCEBFECAEACACECADFAECABEACCDAAAFACEFBAAFACFAEAAAFEEFCDDDFDADBEACBFBCDFFCFCCECBCBDEEABADABBBDFBFAEEACCFCBACDCDFCBBABCACAABBDEBADFCDFEBFABCBDFFDEAEDDCDBCEDDBEDEBAFFCAECFECBCFEEFACADFCDCDBDFCFECCDFBAFACFBEEEDCEDAFCCDCDCDCEABFDCCEAFEDDEFFCCBEFCEACBAABEADCBAFCADCAADBCDACFAADCEBCDFCEBBAECADEBFFFFCAFFEBDEBEAADBDCBAECAAFEBBFAACDDCCABDDDFFEDCDAFEEBBCFEBADEBEBEFDFDCCBAFACCBDBEBFDACCEBCCFBEAEBCDECDDADCCDDDEBFCCFCECDEECEABCBDDFFEBEFDEDECBFBBBEDDAABEBDCCFDDABAFCEEDDBBFBAACFEEADEFFDDCFCFCBEBAAFCDCEEBDCFDFCBDDEDCBAEFACFBAAFBACCAEFAFFDCDDCAAEDDFBBCADCBECFDABDBDAFCACEDAEDACFDAADCAACACDFDDEFCBFBDFEFACECCEBEEFBFEFBEAEBDADCCCACDFECEAEACDFEFCFEAFACFCDACEBDABDDEBECBCABFDADADBECBBFCCECBFFFACBCBFDABDAFFECDBDBCDAFDDDFCCFBAFADFFAFFB";
  char s[] = "AABAA";

  printf("%p\n%p\n", BoyerMooreStringSearch(t, strlen(t), s, strlen(s)),
         strstr(t, s));

  return 0;
}